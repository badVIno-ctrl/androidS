package com.example.myapplication;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Build;
import android.os.IBinder;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import androidx.core.app.ActivityCompat;
import ai.picovoice.porcupine.Porcupine;
import ai.picovoice.porcupine.PorcupineException;
public class WakeWordService extends Service {
    private static final int KEYWORD_RESOURCE_ID = R.raw.wednesday_en_android_v3_0_0;
    private static final float SENSITIVITY = 0.5f;
    private static final String ACCESS_KEY = "B5C24m0P7Lp7vk3qWDh/7O5Bv8SGHiNkqgDcAK9OlFso6ivqsOUM1Q==";
    private static final String CHANNEL_ID = "WakeWordServiceChannel";
    private static final String NOTIFICATION_TITLE = "Wake Word Service";
    private static final String NOTIFICATION_TEXT = "Listening for wake word...";
    private static final int NOTIFICATION_ID = 1;

    private Porcupine porcupine;
    private Thread wakeWordThread;
    private boolean isListening = false;
    private AudioRecord audioRecord;

    @Override
    public void onCreate() {
        super.onCreate();
        createNotificationChannel();
        initializePorcupine();
        startListening();
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    CHANNEL_ID,
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(serviceChannel);
            }
        }
    }


    private void initializePorcupine() {
        try (InputStream keywordInputStream = getResources().openRawResource(KEYWORD_RESOURCE_ID)) {
            porcupine = new Porcupine.Builder()
                    .setAccessKey(ACCESS_KEY)
                    .setKeywordPath(keywordInputStream.toString())
                    .setSensitivity(SENSITIVITY)
                    .build(this);
        } catch (PorcupineException | IOException e) {
            Log.e("WakeWordService", "Ошибка инициализации Porcupine: " + e.getMessage());
        }
    }

    private void startListening() {
        if (porcupine != null && !isListening) {
            isListening = true;
            wakeWordThread = new Thread(() -> {
                try {
                    int bufferSize = AudioRecord.getMinBufferSize(16000, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
                    if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
                        return;
                    }
                    audioRecord = new AudioRecord(
                            MediaRecorder.AudioSource.MIC,
                            16000,
                            AudioFormat.CHANNEL_IN_MONO,
                            AudioFormat.ENCODING_PCM_16BIT,
                            bufferSize
                    );
                    audioRecord.startRecording();

                    while (isListening) {
                        short[] buffer = new short[porcupine.getFrameLength()];
                        int bytesRead = audioRecord.read(buffer, 0, buffer.length);
                        if (bytesRead > 0) {
                            int keywordIndex = porcupine.process(buffer);
                            if (keywordIndex >= 0) {
                                Log.d("WakeWordService", "Ключевая фраза распознана: среда");
                                startVoiceAssistant();
                            }
                        }
                    }
                } catch (PorcupineException e) {
                    Log.e("WakeWordService", "Ошибка обработки Porcupine: " + e.getMessage());
                } finally {
                    if (audioRecord != null) {
                        audioRecord.stop();
                        audioRecord.release();
                    }
                }
            });
            wakeWordThread.start();
        }
    }

    private void startVoiceAssistant() {
        Intent intent = new Intent(this, VoiceService.class);
        startService(intent);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        isListening = false;
        if (wakeWordThread != null) {
            wakeWordThread.interrupt();
        }
        if (porcupine != null) {
            porcupine.delete();
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}
